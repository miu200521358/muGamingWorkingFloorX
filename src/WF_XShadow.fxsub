////////////////////////////////////////////////////////////////////////////////////////////////
//
//  WF_XShadow.fxsub  Xシャドー描画
//  ( WorkingFloorX.fx から呼び出されます．オフスクリーン描画用)
//  作成: 針金P( 舞力介入P氏のfull.fx改変,mqdl氏のxshadow.fx参考 )
//  改変: miu
//
////////////////////////////////////////////////////////////////////////////////////////////////
// ここのパラメータを変更してください
float BoneMaxHeight = 3.0;      // Xシャドーが描画される足首ボーンの最大高さ(モデルサイズで変動有り)
float XShadowSize = 1.3;        // Xシャドーのサイズ
float XShadowAlpha = 0.65;      // Xシャドーの透過度
float XShadowZOffset = -0.3;    // Xシャドーの前後方向位置補正値

#define AutoSize    1           // モデルの大きさによるXシャドーサイズの自動調整を 0:行わない, 1:行う
#define AutoDensity 1           // ライト照度によるXシャドー濃度の自動調整を 0:行わない, 1:行う
#define XShadowIndividual 1     // モデル個別のランダム色を 0:適用しない(全員同じキーフレは同じ色), 1:適用する

#define SHADOW1_FILENAME "tex/光芒1.png"
#define SHADOW2_FILENAME "tex/ベース.png"


//X影色相
// 0: 色相ランダム
// 〜1: 赤-橙(0.1)-黄(0.16)-緑(0.3)-水(0.5)-青(0.6)-紫(0.75)-桃(0.85)-赤(1)
float ShadowHue
<
   string UIName = "ShadowHue";
   string UIWidget = "Slider";
   bool UIVisible =  true;
   int UIMin = 0;
   int UIMax = 1;
> = 0;

//X影彩度
// 0: 彩度ランダム
// 〜1: 値が大きいほど彩度が強くなる（鮮やかになる）
float ShadowSaturation
<
   string UIName = "ShadowSaturation";
   string UIWidget = "Slider";
   bool UIVisible =  true;
   int UIMin = 0;
   int UIMax = 1;
> = 0.9;

//X影明度
// 0: 明度ランダム
// 〜1: 値が大きいほど明度が強くなる(淡くなる)
// 1にしてしまうと、ほとんどX影が消えてしまうので1未満の方が安定して表示される
float ShadowValue
<
   string UIName = "ShadowValue";
   string UIWidget = "Slider";
   bool UIVisible =  true;
   int UIMin = 0;
   int UIMax = 1;
> = 1;

// 解らない人はここから下はいじらないでね

///////////////////////////////////////////////////////////////////////////////////////////////

// MMM対応
#ifndef MIKUMIKUMOVING
    float3 LightAmbient : AMBIENT  < string Object = "Light"; >;
#else
    bool   LightEnables[MMM_LightCount]   : LIGHTENABLES;      // 有効フラグ
    float3 LightAmbients[MMM_LightCount]  : LIGHTAMBIENTCOLORS;
    float3 GetLightAmbient()
    {
        float3 ambient = float3(0, 0, 0);
        float count = 0;
        for (int i = 0; i < 3; i++) {
            if (LightEnables[i]) {
                ambient += LightAmbients[i];
                count = count + 1.0;
            }
        }
        return saturate(ambient / count);
    }
    static float3 LightAmbient = GetLightAmbient();
#endif

////////////////////////////////////////////////////////////////////////////////////////////////

// 座標変換行列
float4x4 WorldMatrix       : WORLD;
float4x4 ViewMatrix        : VIEW;
float4x4 ProjMatrix        : PROJECTION;
float4x4 ViewProjMatrix    : VIEWPROJECTION;
float3 MirrorPos : CONTROLOBJECT < string Name = "(OffscreenOwner)"; >; // 鏡面アクセのワールド変換行列

//カメラ位置
float3 CameraPosition : POSITION  < string Object = "Camera"; >;

// 足ボーンパラメータ
float4x4 AnkleWldMatR : CONTROLOBJECT < string name = "(self)"; string item = "右足首"; >;
float4x4 AnkleWldMatL : CONTROLOBJECT < string name = "(self)"; string item = "左足首"; >;
static float3 FootPosR = AnkleWldMatR._41_42_43;
static float3 FootPosL = AnkleWldMatL._41_42_43;
static float rotR = atan2(AnkleWldMatR._13, AnkleWldMatR._33);
static float rotL = atan2(AnkleWldMatL._13, AnkleWldMatL._33);

#if(AutoSize == 1)
// 足の長さをモデルの大きさとする
float3 KneeWldPosR : CONTROLOBJECT < string name = "(self)"; string item = "右ひざ"; >;
float3 KneeWldPosL : CONTROLOBJECT < string name = "(self)"; string item = "左ひざ"; >;
float3 LegWldPosR : CONTROLOBJECT < string name = "(self)"; string item = "右足"; >;
float3 LegWldPosL : CONTROLOBJECT < string name = "(self)"; string item = "左足"; >;
static float FootLenR = (length(FootPosR - KneeWldPosR) + length(KneeWldPosR - LegWldPosR)) / 9.42f + 0.001f;
static float FootLenL = (length(FootPosL - KneeWldPosL) + length(KneeWldPosL - LegWldPosL)) / 9.42f + 0.001f;
#else
float FootLenR = 1.0f;
float FootLenL = 1.0f;
#endif

// 人型でないモデルのX影を非表示にするフラグ
static float PmdType = step( 0.0f, abs(FootPosR.x)+abs(FootPosR.y)+abs(FootPosL.x)+abs(FootPosL.y) );

// X影の濃度
#if(AutoDensity == 1)
static float BrightNess = 0.5f + max( (3.0f-LightAmbient.r-LightAmbient.g-LightAmbient.b)*0.5f, 0.0f );
#else
float BrightNess = 1.1f;
#endif

// X影のテクスチャ
texture2D XShadowTex1 <
    string ResourceName = SHADOW1_FILENAME;
>;
sampler XShadowSamp1 = sampler_state {
    texture = <XShadowTex1>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU  = CLAMP;
    AddressV  = CLAMP;
};

texture2D XShadowTex2 <
    string ResourceName = SHADOW2_FILENAME;
>;
sampler XShadowSamp2 = sampler_state {
    texture = <XShadowTex2>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU  = CLAMP;
    AddressV  = CLAMP;
};


float time : TIME < bool SyncInEditMode = true; >;

///////////////////////////////////////////////////////////////////////////////////////////////
// ゲーミング色生成処理

// https://www.chilliant.com/rgb2hsv.html
float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R,G,B));
}

float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

// ランダム色取得
float4 getRandomRGB(float3 pos)
{
    float3 hsv = (float3)0;
    
    // ランダム値の計算方法を変えると、ゲーミング具合も変わる
    hsv.x = (ShadowHue <= 0)           ? ((XShadowIndividual == 0) ? 1 : (abs(pos.x + pos.y)) / 50 ) * sin(time) + 0.3 : ShadowHue;
    hsv.y = (ShadowSaturation <= 0)    ? (abs(pos.x) * cos(time)) % 10  : ShadowSaturation;
    hsv.z = (ShadowValue <= 0)         ? (abs(pos.z) * sin(time)) % 10  : ShadowValue;
    
    // HSVをRGBに変換
    float3 rgb = HSVtoRGB(hsv);
    
    return float4(saturate(rgb), 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////
// 座標の2D回転
float3 Rotation2D(float3 pos, float rot)
{
    float sinR, cosR;
    sincos(rot, sinR, cosR);
    float x = pos.x * cosR - pos.z * sinR;
    float z = pos.x * sinR + pos.z * cosR;

    return float3(x, pos.y, z);
}

///////////////////////////////////////////////////////////////////////////////////////////////
// X影描画

struct VS_OUTPUT {
    float4 Pos      : POSITION;    // 射影変換座標
    float2 Tex      : TEXCOORD0;   // テクスチャ
    float4 Color    : COLOR0;      // α値
    float3 FootPos  : TEXCOORD1;   // 足の位置
};

// 頂点シェーダ
VS_OUTPUT XShadow_VS(float4 Pos : POSITION, float2 Tex : TEXCOORD,
                     uniform bool RorL, uniform float coefScale,  uniform float coefAlpha)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;

    float  FootLen, rot;
    float3 FootPos;
    if( RorL ){
        // 右足パラメータ
        FootLen = FootLenR;
        FootPos = FootPosR;
        rot = rotR;
    }else{
        // 左足パラメータ
        FootLen = FootLenL;
        FootPos = FootPosL;
        rot = rotL;
    }

    // "Draw=Buffer;"で得た矩形板ポリを通常のオブジェクトとして扱う
    Pos.z = Pos.y;
    Pos.y = 0.0f;
    Pos.w = 1.0f;

    // X影の大きさ
    Pos.xyz *= coefScale * XShadowSize * FootLen * PmdType;

    // X影のワールド座標
    float3 offset = Rotation2D( float3(0.0f, 0.0f, XShadowZOffset * FootLen), rot );
    Pos.xyz += float3(FootPos.x, MirrorPos.y, FootPos.z) + offset;

    // カメラ視点のビュー射影変換
    Out.Pos = mul( Pos, ViewProjMatrix );

    // X影の透過度
    float alpha = ( 1.0f - saturate((FootPos.y - coefAlpha - MirrorPos.y) / (BoneMaxHeight - coefAlpha) / FootLen) ) * XShadowAlpha;
    Out.Color = float4(alpha, alpha, alpha, 1.0f);

    // テクスチャ座標
    Out.Tex = Tex;

    // 足の位置
    Out.FootPos = FootPos;

    return Out;
}


// ピクセルシェーダ
float4 XShadow_PS(VS_OUTPUT IN, uniform sampler XShadowSamp) : COLOR0
{
    // 人型モデル以外は描画しない
    clip( PmdType - 0.0001f );

    // X影の色
    float4 Color = tex2D( XShadowSamp, IN.Tex );

    // 先に透明度でテクスチャを区切る
    Color.a *= IN.Color.r;

    // ゲーミング色を取得
    float4 rgb = getRandomRGB( IN.FootPos );
    Color.rgb = saturate( rgb.rgb * BrightNess );
    Color.rgb *= 2;

    return Color;
}


///////////////////////////////////////////////////////////////////////////////////////////////
// テクニック

technique MainTec < string MMDPass = "object"; string Subset = "0"; >
{
    pass DrawXShadowR1 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( false, 7.0f, 1.0f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp1 );
    }
    pass DrawXShadowR2 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( false, 0.9f, 1.5f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp2 );
    }
    pass DrawXShadowL1 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( true, 7.0f, 1.0f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp1 );
    }
    pass DrawXShadowL2 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( true, 0.9f, 1.5f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp2 );
    }
}

technique MainTecSS < string MMDPass = "object_ss"; string Subset = "0"; >
{
    pass DrawXShadowR1 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( false, 7.0f, 1.0f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp1 );
    }
    pass DrawXShadowR2 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( false, 0.9f, 1.5f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp2 );
    }
    pass DrawXShadowL1 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( true, 7.0f, 1.0f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp1 );
    }
    pass DrawXShadowL2 < string Script= "Draw=Buffer;"; > {
        ZENABLE = FALSE;
        AlphaBlendEnable = TRUE;
        SrcBlend = ONE;
        DestBlend = ONE;
        VertexShader = compile vs_2_0 XShadow_VS( true, 0.9f, 1.5f );
        PixelShader  = compile ps_2_0 XShadow_PS( XShadowSamp2 );
    }
}

technique MainTec2 < string MMDPass = "object"; > { }
technique MainTec3 < string MMDPass = "object_ss"; > { }

//エッジや地面影は描画しない
technique EdgeTec < string MMDPass = "edge"; > { }
technique ShadowTec < string MMDPass = "shadow"; > { }
technique ZplotTec < string MMDPass = "zplot"; > { }

